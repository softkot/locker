// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: locker.proto

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LockerClient is the client API for Locker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LockerClient interface {
	// Запрашивает блокировку имени Entity.name, как только она будет получена возвращает Entity и владеет именем до отмены вызова клиентом
	Lock(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Locker_LockClient, error)
	// Запрашивает блокировку имени Entity.name, если она будет получена возвращает Entity и владеет именем до отмены вызова клиентом
	// либо возвращает пустой поток если получить блокировку не удалось
	TryLock(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Locker_TryLockClient, error)
}

type lockerClient struct {
	cc grpc.ClientConnInterface
}

func NewLockerClient(cc grpc.ClientConnInterface) LockerClient {
	return &lockerClient{cc}
}

func (c *lockerClient) Lock(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Locker_LockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Locker_ServiceDesc.Streams[0], "/ru.softlynx.locker.api.Locker/Lock", opts...)
	if err != nil {
		return nil, err
	}
	x := &lockerLockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Locker_LockClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type lockerLockClient struct {
	grpc.ClientStream
}

func (x *lockerLockClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lockerClient) TryLock(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Locker_TryLockClient, error) {
	stream, err := c.cc.NewStream(ctx, &Locker_ServiceDesc.Streams[1], "/ru.softlynx.locker.api.Locker/TryLock", opts...)
	if err != nil {
		return nil, err
	}
	x := &lockerTryLockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Locker_TryLockClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type lockerTryLockClient struct {
	grpc.ClientStream
}

func (x *lockerTryLockClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LockerServer is the server API for Locker service.
// All implementations should embed UnimplementedLockerServer
// for forward compatibility
type LockerServer interface {
	// Запрашивает блокировку имени Entity.name, как только она будет получена возвращает Entity и владеет именем до отмены вызова клиентом
	Lock(*Entity, Locker_LockServer) error
	// Запрашивает блокировку имени Entity.name, если она будет получена возвращает Entity и владеет именем до отмены вызова клиентом
	// либо возвращает пустой поток если получить блокировку не удалось
	TryLock(*Entity, Locker_TryLockServer) error
}

// UnimplementedLockerServer should be embedded to have forward compatible implementations.
type UnimplementedLockerServer struct {
}

func (UnimplementedLockerServer) Lock(*Entity, Locker_LockServer) error {
	return status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedLockerServer) TryLock(*Entity, Locker_TryLockServer) error {
	return status.Errorf(codes.Unimplemented, "method TryLock not implemented")
}

// UnsafeLockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LockerServer will
// result in compilation errors.
type UnsafeLockerServer interface {
	mustEmbedUnimplementedLockerServer()
}

func RegisterLockerServer(s grpc.ServiceRegistrar, srv LockerServer) {
	s.RegisterService(&Locker_ServiceDesc, srv)
}

func _Locker_Lock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LockerServer).Lock(m, &lockerLockServer{stream})
}

type Locker_LockServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type lockerLockServer struct {
	grpc.ServerStream
}

func (x *lockerLockServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _Locker_TryLock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LockerServer).TryLock(m, &lockerTryLockServer{stream})
}

type Locker_TryLockServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type lockerTryLockServer struct {
	grpc.ServerStream
}

func (x *lockerTryLockServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

// Locker_ServiceDesc is the grpc.ServiceDesc for Locker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Locker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ru.softlynx.locker.api.Locker",
	HandlerType: (*LockerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Lock",
			Handler:       _Locker_Lock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TryLock",
			Handler:       _Locker_TryLock_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "locker.proto",
}
